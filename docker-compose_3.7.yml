version: '3.7'

services:
  go-app:
    image: golang:1.18
    volumes:
      - ./go-app:/go/src/app
    working_dir: /go/src/app
    command: go run main.go
    ports:
      - "8080:8080"

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  mariadb:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
    ports:
      - "3306:3306"
    volumes:
      - mariadb-data:/var/lib/mysql

  postfix:
    image: catatnight/postfix
    environment:
      maildomain: mydomain.com
      smtp_user: user:pwd
    ports:
      - "25:25"

  python-app:
    image: python:3.9
    volumes:
      - ./python-app:/usr/src/app
    working_dir: /usr/src/app
    command: python main.py

volumes:
  mariadb-data:


    Adjustments for Version 3.7
    The Docker Compose file version is set to 3.7. This version is still fully compatible with the service configurations provided in the original file. Version 3.7 supports all the specified options for your services, including volume mappings, environment variables, port configurations, and depends_on.
    
    Make sure the paths (./go-app, ./python-app) accurately reflect where your Go and Python applications are located relative to the docker-compose.yml file.
    
    Replace main.go and main.py with the entry file names of your Go and Python applications, respectively.
    
    For MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, maildomain, and smtp_user, ensure you use your actual configuration values for MariaDB and Postfix.
    
    The configuration for each service should work as expected under Compose file version 3.7, ensuring the same functionality as outlined in the "Response 2".
    
    Running Your Docker Compose
    Place this docker-compose.yml file at the root of your project directory.
    Open a terminal and navigate to the directory containing your docker-compose.yml.
    Run docker-compose up to start your services.
    Use docker-compose down to stop your services.
    Remember to adjust paths, versions, and configurations according to your project's needs and security best practices, especially for production environments.