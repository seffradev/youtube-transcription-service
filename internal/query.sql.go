// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package internal

import (
	"context"
	"database/sql"
	"time"
)

const createTranscription = `-- name: CreateTranscription :execresult
INSERT INTO
    transcription (id, status)
VALUES (
    ?,
    'pending'
)
`

func (q *Queries) CreateTranscription(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTranscription, id)
}

const getTranscription = `-- name: GetTranscription :one
SELECT
    id,
    text,
    status,
    requested_at,
    completed_at
FROM
    transcription
WHERE
    id = ?
LIMIT 1
`

type GetTranscriptionRow struct {
	ID          string
	Text        sql.NullString
	Status      TranscriptionStatus
	RequestedAt time.Time
	CompletedAt sql.NullTime
}

func (q *Queries) GetTranscription(ctx context.Context, id string) (GetTranscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, getTranscription, id)
	var i GetTranscriptionRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Status,
		&i.RequestedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listTranscriptions = `-- name: ListTranscriptions :many
SELECT
    id,
    status,
    requested_at,
    completed_at
FROM
    transcription
`

type ListTranscriptionsRow struct {
	ID          string
	Status      TranscriptionStatus
	RequestedAt time.Time
	CompletedAt sql.NullTime
}

func (q *Queries) ListTranscriptions(ctx context.Context) ([]ListTranscriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTranscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTranscriptionsRow
	for rows.Next() {
		var i ListTranscriptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.RequestedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranscription = `-- name: UpdateTranscription :execresult
UPDATE
    transcription
SET
    text = ?,
    status = ?,
    completed_at = now()
WHERE
    id = ?
`

type UpdateTranscriptionParams struct {
	Text   sql.NullString
	Status TranscriptionStatus
	ID     string
}

func (q *Queries) UpdateTranscription(ctx context.Context, arg UpdateTranscriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTranscription, arg.Text, arg.Status, arg.ID)
}
